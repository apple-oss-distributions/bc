#!/usr/bin/perl -w

use strict;
use warnings;
use FindBin qw($Script);
use Storable qw(dclone);

our $SRCROOT = $ENV{SRCROOT} // '.';
our $DSTROOT = $ENV{DSTROOT} // '/tmp/bc.dst';
our $TESTROOT = $ENV{TESTROOT} // '/AppleInternal/Tests/bc';
our $TESTSDIR = $ENV{TESTSDIR} // "$TESTROOT/tests";

sub boolean { my ($self) = @_; bless(\$self, 'boolean') }
sub true { boolean(1) }
sub false { boolean(0) }
sub integer { my ($self) = @_; bless(\$self, 'integer') }
sub string { my ($self) = @_; bless(\$self, 'string') }

my $i;

sub indent { "        "x$i }

sub remit {
    my ($item) = @_;
    if (!ref($item)) {
	print(indent, "<string>$item</string>\n");
    } elsif (ref($item) eq 'boolean') {
	print(indent, "<", $$item ? "true" : "false", "/>\n");
    } elsif (ref($item) eq 'integer') {
	print(indent, "<integer>$$item</integer>\n");
    } elsif (ref($item) eq 'string') {
	print(indent, "<string>$$item</string>\n");
    } elsif (ref($item) eq 'HASH') {
	print(indent, "<dict>\n");
	$i++;
	foreach (sort keys %$item) {
	    print(indent, "<key>$_</key>\n");
	    remit($$item{$_});
	}
	$i--;
	print(indent, "</dict>\n");
    } elsif (ref($item) eq 'ARRAY') {
	print(indent, "<array>\n");
	$i++;
	foreach (@$item) {
	    remit($_);
	}
	$i--;
	print(indent, "</array>\n");
    } else {
	die("unsupported type: " . ref($item) . "\n");
    }
}

sub emit {
    my %plist = @_;
    print("<?xml version='1.0' encoding='UTF-8'?>\n");
    print("<!DOCTYPE plist PUBLIC '-//Apple//DTD PLIST 1.0//EN' 'http://www.apple.com/DTDs/PropertyList-1.0.dtd'>\n");
    print("<!-- Generated by $Script -->\n");
    print("<plist version='1.0'>\n");
    $i = 0;
    remit(\%plist);
    print("</plist>\n");

}

MAIN:{
    chdir($SRCROOT)
	or die("$SRCROOT: $!\n");
    -f "bc/bcl.pc.in"
	or die("Where is the bc source code?\n");
    open(my $mfh, "<", "bc/Makefile")
	or die("Did you run configure?\n");
    my (%makeenv, @t, %tc, $tn, $tp);
    $makeenv{TESTSDIR} = $TESTSDIR;
    $makeenv{BC_EXEC} = 'bc';
    $makeenv{DC_EXEC} = 'dc';
    $tc{ShellEnv} = {
	BC_TEST_OUTPUT_DIR => '/tmp/bc.test'
    };
    $tc{Timeout} = integer(300);
    $tc{WorkingDirectory} = $TESTROOT;
    $tc{WhenToRun} = [ 'PRESUBMISSION', 'NIGHTLY' ];
    while (<$mfh>) {
	chomp;
	if (/^(BC_ENABLE_\w+)\s*=\s*(\d)$/) {
	    # variable we want to pick up
	    $makeenv{$1} = $2
	} elsif (/^test_([bd]c)_([\w.]+):$/) {
	    # test target
	    $tp = $1;
	    $tn = $2;
	} elsif ($tn && m/export BC_TEST_OUTPUT_DIR/) {
	    # first line of test recipe
	    s@.*; sh @@;
	    s@\$\((\w+)\)@$makeenv{$1}//''@ge;
	    $tc{TestName} = "test_bc.$tp.$tn";
	    $tc{Command} = [ '/bin/sh', split(' ', $_) ];
	    push(@t, dclone(\%tc));
	} else {
	    $tn = undef;
	}
    }
    close($mfh);
    emit(Project => 'bc', IgnoreOutput => true, Tests => \@t);
}
